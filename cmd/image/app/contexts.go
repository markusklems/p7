// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/markusklems/p7/cmd/image/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/image
// --version=v1.1.0-dirty
//
// API "image": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
)

// CreateImageContext provides the image create action context.
type CreateImageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateImagePayload
}

// NewCreateImageContext parses the incoming request URL and body, performs validations and creates the
// context used by the image controller create action.
func NewCreateImageContext(ctx context.Context, service *goa.Service) (*CreateImageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateImageContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createImagePayload is the image create action payload.
type createImagePayload struct {
	CodePath *string `form:"codePath,omitempty" json:"codePath,omitempty" xml:"codePath,omitempty"`
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	Tag      *string `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createImagePayload) Validate() (err error) {
	if payload.CodePath == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "codePath"))
	}
	if payload.Tag == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "tag"))
	}
	return
}

// Publicize creates CreateImagePayload from createImagePayload
func (payload *createImagePayload) Publicize() *CreateImagePayload {
	var pub CreateImagePayload
	if payload.CodePath != nil {
		pub.CodePath = *payload.CodePath
	}
	if payload.Provider != nil {
		pub.Provider = payload.Provider
	}
	if payload.Tag != nil {
		pub.Tag = *payload.Tag
	}
	return &pub
}

// CreateImagePayload is the image create action payload.
type CreateImagePayload struct {
	CodePath string  `form:"codePath" json:"codePath" xml:"codePath"`
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	Tag      string  `form:"tag" json:"tag" xml:"tag"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateImagePayload) Validate() (err error) {
	if payload.CodePath == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "codePath"))
	}
	if payload.Tag == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "tag"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateImageContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateImageContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteImageContext provides the image delete action context.
type DeleteImageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ImageID string
}

// NewDeleteImageContext parses the incoming request URL and body, performs validations and creates the
// context used by the image controller delete action.
func NewDeleteImageContext(ctx context.Context, service *goa.Service) (*DeleteImageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteImageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramImageID := req.Params["image_id"]
	if len(paramImageID) > 0 {
		rawImageID := paramImageID[0]
		rctx.ImageID = rawImageID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteImageContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteImageContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteImageContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListImageContext provides the image list action context.
type ListImageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListImageContext parses the incoming request URL and body, performs validations and creates the
// context used by the image controller list action.
func NewListImageContext(ctx context.Context, service *goa.Service) (*ListImageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListImageContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListImageContext) OK(r ImageCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.image+json; type=collection")
	if r == nil {
		r = ImageCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListImageContext) OKLink(r ImageLinkCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.image+json; type=collection")
	if r == nil {
		r = ImageLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListImageContext) OKTiny(r ImageTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.image+json; type=collection")
	if r == nil {
		r = ImageTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowImageContext provides the image show action context.
type ShowImageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ImageID string
}

// NewShowImageContext parses the incoming request URL and body, performs validations and creates the
// context used by the image controller show action.
func NewShowImageContext(ctx context.Context, service *goa.Service) (*ShowImageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowImageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramImageID := req.Params["image_id"]
	if len(paramImageID) > 0 {
		rawImageID := paramImageID[0]
		rctx.ImageID = rawImageID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowImageContext) OK(r *Image) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.image+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowImageContext) OKLink(r *ImageLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.image+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowImageContext) OKTiny(r *ImageTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.image+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowImageContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowImageContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
