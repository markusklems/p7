// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/markusklems/p7/cmd/image/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/image
// --version=v1.1.0-dirty
//
// API "image": image Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// CreateImagePayload is the image create action payload.
type CreateImagePayload struct {
	CodePath string  `form:"codePath" json:"codePath" xml:"codePath"`
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	Tag      string  `form:"tag" json:"tag" xml:"tag"`
}

// CreateImagePath computes a request path to the create action of image.
func CreateImagePath() string {

	return fmt.Sprintf("/image/images")
}

// Create new image
func (c *Client) CreateImage(ctx context.Context, path string, payload *CreateImagePayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateImageRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateImageRequest create the request corresponding to the create action endpoint of the image resource.
func (c *Client) NewCreateImageRequest(ctx context.Context, path string, payload *CreateImagePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteImagePath computes a request path to the delete action of image.
func DeleteImagePath(imageID string) string {
	param0 := imageID

	return fmt.Sprintf("/image/images/%s", param0)
}

// DeleteImage makes a request to the delete action endpoint of the image resource
func (c *Client) DeleteImage(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteImageRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteImageRequest create the request corresponding to the delete action endpoint of the image resource.
func (c *Client) NewDeleteImageRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListImagePath computes a request path to the list action of image.
func ListImagePath() string {

	return fmt.Sprintf("/image/images")
}

// Retrieve all images.
func (c *Client) ListImage(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListImageRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListImageRequest create the request corresponding to the list action endpoint of the image resource.
func (c *Client) NewListImageRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowImagePath computes a request path to the show action of image.
func ShowImagePath(imageID string) string {
	param0 := imageID

	return fmt.Sprintf("/image/images/%s", param0)
}

// Retrieve image with given id. IDs 1 and 2 pre-exist in the system.
func (c *Client) ShowImage(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowImageRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowImageRequest create the request corresponding to the show action endpoint of the image resource.
func (c *Client) NewShowImageRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
