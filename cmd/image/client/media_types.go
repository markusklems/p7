// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "image": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/markusklems/p7/cmd/image/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/image
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A docker image (default view)
//
// Identifier: application/vnd.image+json; view=default
type Image struct {
	// Architecture of image
	Architecture *string `form:"architecture,omitempty" json:"architecture,omitempty" xml:"architecture,omitempty"`
	// Author of image
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Comment of image
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" xml:"comment,omitempty"`
	// Container
	Container *string `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	// Containers
	Containers int `form:"containers" json:"containers" xml:"containers"`
	// Date of creation
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// Complete ID of image
	FullID string `form:"fullId" json:"fullId" xml:"fullId"`
	// API href of image
	Href string `form:"href" json:"href" xml:"href"`
	// ID of image
	ID string `form:"id" json:"id" xml:"id"`
	// Labels of one container
	Labels interface{} `form:"labels" json:"labels" xml:"labels"`
	// OS of image
	Os *string `form:"os,omitempty" json:"os,omitempty" xml:"os,omitempty"`
	// OS version of image
	OsVersion *string `form:"osVersion,omitempty" json:"osVersion,omitempty" xml:"osVersion,omitempty"`
	// Parent container
	Parent *string `form:"parent,omitempty" json:"parent,omitempty" xml:"parent,omitempty"`
	// Parent container ID
	ParentID string `form:"parentID" json:"parentID" xml:"parentID"`
	// Digests of one container
	RepoDigests *interface{} `form:"repoDigests,omitempty" json:"repoDigests,omitempty" xml:"repoDigests,omitempty"`
	// Tags of one container
	RepoTags interface{} `form:"repoTags" json:"repoTags" xml:"repoTags"`
	// Size of image
	Size *int `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
}

// Validate validates the Image media type instance.
func (mt *Image) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.FullID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "fullId"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}

	if mt.ParentID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "parentID"))
	}

	return
}

// A docker image (link view)
//
// Identifier: application/vnd.image+json; view=link
type ImageLink struct {
	// API href of image
	Href string `form:"href" json:"href" xml:"href"`
	// ID of image
	ID string `form:"id" json:"id" xml:"id"`
}

// Validate validates the ImageLink media type instance.
func (mt *ImageLink) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	return
}

// A docker image (tiny view)
//
// Identifier: application/vnd.image+json; view=tiny
type ImageTiny struct {
	// API href of image
	Href string `form:"href" json:"href" xml:"href"`
	// ID of image
	ID string `form:"id" json:"id" xml:"id"`
}

// Validate validates the ImageTiny media type instance.
func (mt *ImageTiny) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	return
}

// DecodeImage decodes the Image instance encoded in resp body.
func (c *Client) DecodeImage(resp *http.Response) (*Image, error) {
	var decoded Image
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeImageLink decodes the ImageLink instance encoded in resp body.
func (c *Client) DecodeImageLink(resp *http.Response) (*ImageLink, error) {
	var decoded ImageLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeImageTiny decodes the ImageTiny instance encoded in resp body.
func (c *Client) DecodeImageTiny(resp *http.Response) (*ImageTiny, error) {
	var decoded ImageTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ImageCollection is the media type for an array of Image (default view)
//
// Identifier: application/vnd.image+json; type=collection; view=default
type ImageCollection []*Image

// Validate validates the ImageCollection media type instance.
func (mt ImageCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ImageCollection is the media type for an array of Image (link view)
//
// Identifier: application/vnd.image+json; type=collection; view=link
type ImageLinkCollection []*ImageLink

// Validate validates the ImageLinkCollection media type instance.
func (mt ImageLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ImageCollection is the media type for an array of Image (tiny view)
//
// Identifier: application/vnd.image+json; type=collection; view=tiny
type ImageTinyCollection []*ImageTiny

// Validate validates the ImageTinyCollection media type instance.
func (mt ImageTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeImageCollection decodes the ImageCollection instance encoded in resp body.
func (c *Client) DecodeImageCollection(resp *http.Response) (ImageCollection, error) {
	var decoded ImageCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeImageLinkCollection decodes the ImageLinkCollection instance encoded in resp body.
func (c *Client) DecodeImageLinkCollection(resp *http.Response) (ImageLinkCollection, error) {
	var decoded ImageLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeImageTinyCollection decodes the ImageTinyCollection instance encoded in resp body.
func (c *Client) DecodeImageTinyCollection(resp *http.Response) (ImageTinyCollection, error) {
	var decoded ImageTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
