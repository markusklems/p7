consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  Lambda:
    description: A microservice function named lambda (default view)
    example:
      environment: AZURE
      href: /lambdas/1
      id: 1
      method: DELETE
      name: wz
    properties:
      environment:
        description: Execution environment used to run a lambda
        enum:
        - AWS
        - GCLOUD
        - AZURE
        example: AZURE
        type: string
      href:
        description: API href for making requests on the lambda
        example: /lambdas/1
        type: string
      id:
        description: Unique lambda ID
        example: 1
        format: int64
        type: integer
      method:
        description: HTTP method triggering a lambda
        enum:
        - GET
        - POST
        - PUT
        - DELETE
        example: DELETE
        type: string
      name:
        description: Name of lambda
        example: wz
        minLength: 2
        type: string
    required:
    - id
    - href
    - name
    - method
    title: 'Mediatype identifier: application/vnd.lambda+json; view=default'
    type: object
  LambdaCollection:
    description: LambdaCollection is the media type for an array of Lambda (default
      view)
    example:
    - environment: AZURE
      href: /lambdas/1
      id: 1
      method: DELETE
      name: wz
    items:
      $ref: '#/definitions/Lambda'
    title: 'Mediatype identifier: application/vnd.lambda+json; type=collection; view=default'
    type: array
  LambdaPayload:
    description: LambdaPayload is the type used to create a lambda
    example:
      code: f5bzyr60yi
      environment: AZURE
      method: DELETE
      name: 5k3
    properties:
      code:
        description: Code that should be executed
        example: f5bzyr60yi
        maxLength: 500
        minLength: 16
        type: string
      environment:
        enum:
        - AWS
        - GCLOUD
        - AZURE
        example: AZURE
        type: string
      method:
        enum:
        - GET
        - POST
        - PUT
        - DELETE
        example: DELETE
        type: string
      name:
        description: Name of lambda
        example: 5k3
        minLength: 2
        type: string
    required:
    - name
    - code
    - method
    - environment
    title: LambdaPayload
    type: object
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
host: 127.0.0.1:8888
info:
  description: Microservice management service
  title: p7 api component
  version: ""
paths:
  /:
    get:
      operationId: public#/
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download public/html/index.html
  /css/{filepath}:
    get:
      operationId: css#/css/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download public/css
  /img/{filepath}:
    get:
      operationId: img#/img/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download public/img
  /js/{filepath}:
    get:
      operationId: js#/js/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download public/js
  /p7/health/check:
    get:
      description: Perform health check.
      operationId: health#check
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      schemes:
      - http
      summary: check health
      tags:
      - health
  /p7/lambdas:
    get:
      description: List all available lambdas
      operationId: lambda#list
      produces:
      - application/vnd.goa.error
      - application/vnd.lambda+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/LambdaCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: list lambda
      tags:
      - lambda
    post:
      description: Creates a lambda
      operationId: lambda#create
      parameters:
      - description: LambdaPayload is the type used to create a lambda
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LambdaPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "201":
          description: Resource created
          headers:
            Location:
              description: href to created resource
              pattern: ^/lambdas/[0-9]+$
              type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: create lambda
      tags:
      - lambda
  /p7/lambdas/{lambda_id}:
    delete:
      operationId: lambda#delete
      parameters:
      - in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: delete lambda
      tags:
      - lambda
    get:
      description: Retrieve lambda with given id
      operationId: lambda#show
      parameters:
      - description: Lambda ID
        in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.lambda+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Lambda'
        "404":
          description: Not Found
      schemes:
      - http
      summary: show lambda
      tags:
      - lambda
    patch:
      operationId: lambda#update
      parameters:
      - in: path
        name: lambda_id
        required: true
        type: integer
      - description: LambdaPayload is the type used to create a lambda
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LambdaPayload'
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: update lambda
      tags:
      - lambda
  /p7/lambdas/{lambda_id}/actions/code:
    get:
      description: Retrieve lambda code with given id
      operationId: lambda#code
      parameters:
      - description: Lambda ID
        in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.lambda+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Lambda'
        "404":
          description: Not Found
      schemes:
      - http
      summary: code lambda
      tags:
      - lambda
  /p7/lambdas/{lambda_id}/actions/run:
    delete:
      operationId: lambda#run#3
      parameters:
      - in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: run lambda
      tags:
      - lambda
    get:
      operationId: lambda#run
      parameters:
      - in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: run lambda
      tags:
      - lambda
    post:
      operationId: lambda#run#1
      parameters:
      - in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: run lambda
      tags:
      - lambda
    put:
      operationId: lambda#run#2
      parameters:
      - in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      summary: run lambda
      tags:
      - lambda
  /p7/lambdas/{lambda_id}/watch:
    get:
      description: Retrieve lambda with given id
      operationId: lambda#watch
      parameters:
      - in: path
        name: lambda_id
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      responses:
        "101":
          description: Switching Protocols
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - ws
      summary: watch lambda
      tags:
      - lambda
  /swagger-ui/{filepath}:
    get:
      operationId: swagger#/swagger-ui/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download public/swagger-ui/
  /swagger.json:
    get:
      operationId: swagger#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download public/swagger/swagger.json
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
  OK:
    description: OK
    schema:
      $ref: '#/definitions/Lambda'
  SwitchingProtocols:
    description: Switching Protocols
schemes:
- http
swagger: "2.0"
