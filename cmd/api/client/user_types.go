// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "p7": Application User Types
//
// Command:
// $ goagen
// --design=github.com/markusklems/p7/cmd/api/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/api
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// LambdaPayload is the type used to create a lambda
type lambdaPayload struct {
	// Code that should be executed
	Code        *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Environment *string `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
	Method      *string `form:"method,omitempty" json:"method,omitempty" xml:"method,omitempty"`
	// Name of lambda
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the lambdaPayload type instance.
func (ut *lambdaPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Code == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if ut.Method == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "method"))
	}
	if ut.Environment == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "environment"))
	}
	if ut.Code != nil {
		if utf8.RuneCountInString(*ut.Code) < 16 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, *ut.Code, utf8.RuneCountInString(*ut.Code), 16, true))
		}
	}
	if ut.Code != nil {
		if utf8.RuneCountInString(*ut.Code) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, *ut.Code, utf8.RuneCountInString(*ut.Code), 500, false))
		}
	}
	if ut.Environment != nil {
		if !(*ut.Environment == "AWS" || *ut.Environment == "GCLOUD" || *ut.Environment == "AZURE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.environment`, *ut.Environment, []interface{}{"AWS", "GCLOUD", "AZURE"}))
		}
	}
	if ut.Method != nil {
		if !(*ut.Method == "GET" || *ut.Method == "POST" || *ut.Method == "PUT" || *ut.Method == "DELETE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.method`, *ut.Method, []interface{}{"GET", "POST", "PUT", "DELETE"}))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 2, true))
		}
	}
	return
}

// Publicize creates LambdaPayload from lambdaPayload
func (ut *lambdaPayload) Publicize() *LambdaPayload {
	var pub LambdaPayload
	if ut.Code != nil {
		pub.Code = *ut.Code
	}
	if ut.Environment != nil {
		pub.Environment = *ut.Environment
	}
	if ut.Method != nil {
		pub.Method = *ut.Method
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// LambdaPayload is the type used to create a lambda
type LambdaPayload struct {
	// Code that should be executed
	Code        string `form:"code" json:"code" xml:"code"`
	Environment string `form:"environment" json:"environment" xml:"environment"`
	Method      string `form:"method" json:"method" xml:"method"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the LambdaPayload type instance.
func (ut *LambdaPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if ut.Method == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "method"))
	}
	if ut.Environment == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "environment"))
	}
	if utf8.RuneCountInString(ut.Code) < 16 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, ut.Code, utf8.RuneCountInString(ut.Code), 16, true))
	}
	if utf8.RuneCountInString(ut.Code) > 500 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, ut.Code, utf8.RuneCountInString(ut.Code), 500, false))
	}
	if !(ut.Environment == "AWS" || ut.Environment == "GCLOUD" || ut.Environment == "AZURE") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.environment`, ut.Environment, []interface{}{"AWS", "GCLOUD", "AZURE"}))
	}
	if !(ut.Method == "GET" || ut.Method == "POST" || ut.Method == "PUT" || ut.Method == "DELETE") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.method`, ut.Method, []interface{}{"GET", "POST", "PUT", "DELETE"}))
	}
	if utf8.RuneCountInString(ut.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, ut.Name, utf8.RuneCountInString(ut.Name), 2, true))
	}
	return
}
