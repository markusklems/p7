// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "p7": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/markusklems/p7/cmd/api/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/api
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
	"unicode/utf8"
)

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A microservice function named lambda (code view)
//
// Identifier: application/vnd.lambda+json; view=code
type LambdaCode struct {
	// Source code of the user lambda
	Code string `form:"code" json:"code" xml:"code"`
}

// Validate validates the LambdaCode media type instance.
func (mt *LambdaCode) Validate() (err error) {
	if mt.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if utf8.RuneCountInString(mt.Code) < 16 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 16, true))
	}
	if utf8.RuneCountInString(mt.Code) > 500 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 500, false))
	}
	return
}

// A microservice function named lambda (default view)
//
// Identifier: application/vnd.lambda+json; view=default
type Lambda struct {
	// Execution environment used to run a lambda
	Environment *string `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
	// API href for making requests on the lambda
	Href string `form:"href" json:"href" xml:"href"`
	// Unique lambda ID
	ID int `form:"id" json:"id" xml:"id"`
	// HTTP method triggering a lambda
	Method string `form:"method" json:"method" xml:"method"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Lambda media type instance.
func (mt *Lambda) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Method == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "method"))
	}
	if mt.Environment != nil {
		if !(*mt.Environment == "AWS" || *mt.Environment == "GCLOUD" || *mt.Environment == "AZURE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.environment`, *mt.Environment, []interface{}{"AWS", "GCLOUD", "AZURE"}))
		}
	}
	if !(mt.Method == "GET" || mt.Method == "POST" || mt.Method == "PUT" || mt.Method == "DELETE") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.method`, mt.Method, []interface{}{"GET", "POST", "PUT", "DELETE"}))
	}
	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// A microservice function named lambda (full view)
//
// Identifier: application/vnd.lambda+json; view=full
type LambdaFull struct {
	// Source code of the user lambda
	Code string `form:"code" json:"code" xml:"code"`
	// Date of creation
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Execution environment used to run a lambda
	Environment *string `form:"environment,omitempty" json:"environment,omitempty" xml:"environment,omitempty"`
	// API href for making requests on the lambda
	Href string `form:"href" json:"href" xml:"href"`
	// Unique lambda ID
	ID int `form:"id" json:"id" xml:"id"`
	// Links to related resources
	Links *LambdaLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	// HTTP method triggering a lambda
	Method string `form:"method" json:"method" xml:"method"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
	// Date of last update
	UpdatedAt *time.Time `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// Validate validates the LambdaFull media type instance.
func (mt *LambdaFull) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if mt.Method == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "method"))
	}
	if utf8.RuneCountInString(mt.Code) < 16 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 16, true))
	}
	if utf8.RuneCountInString(mt.Code) > 500 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 500, false))
	}
	if mt.Environment != nil {
		if !(*mt.Environment == "AWS" || *mt.Environment == "GCLOUD" || *mt.Environment == "AZURE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.environment`, *mt.Environment, []interface{}{"AWS", "GCLOUD", "AZURE"}))
		}
	}
	if !(mt.Method == "GET" || mt.Method == "POST" || mt.Method == "PUT" || mt.Method == "DELETE") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.method`, mt.Method, []interface{}{"GET", "POST", "PUT", "DELETE"}))
	}
	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// A microservice function named lambda (tiny view)
//
// Identifier: application/vnd.lambda+json; view=tiny
type LambdaTiny struct {
	// API href for making requests on the lambda
	Href string `form:"href" json:"href" xml:"href"`
	// Unique lambda ID
	ID int `form:"id" json:"id" xml:"id"`
	// HTTP method triggering a lambda
	Method string `form:"method" json:"method" xml:"method"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the LambdaTiny media type instance.
func (mt *LambdaTiny) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Method == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "method"))
	}
	if !(mt.Method == "GET" || mt.Method == "POST" || mt.Method == "PUT" || mt.Method == "DELETE") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.method`, mt.Method, []interface{}{"GET", "POST", "PUT", "DELETE"}))
	}
	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// LambdaLinks contains links to related resources of Lambda.
type LambdaLinks struct {
}

// DecodeLambdaCode decodes the LambdaCode instance encoded in resp body.
func (c *Client) DecodeLambdaCode(resp *http.Response) (*LambdaCode, error) {
	var decoded LambdaCode
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeLambda decodes the Lambda instance encoded in resp body.
func (c *Client) DecodeLambda(resp *http.Response) (*Lambda, error) {
	var decoded Lambda
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeLambdaFull decodes the LambdaFull instance encoded in resp body.
func (c *Client) DecodeLambdaFull(resp *http.Response) (*LambdaFull, error) {
	var decoded LambdaFull
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeLambdaTiny decodes the LambdaTiny instance encoded in resp body.
func (c *Client) DecodeLambdaTiny(resp *http.Response) (*LambdaTiny, error) {
	var decoded LambdaTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// LambdaCollection is the media type for an array of Lambda (default view)
//
// Identifier: application/vnd.lambda+json; type=collection; view=default
type LambdaCollection []*Lambda

// Validate validates the LambdaCollection media type instance.
func (mt LambdaCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// LambdaCollection is the media type for an array of Lambda (tiny view)
//
// Identifier: application/vnd.lambda+json; type=collection; view=tiny
type LambdaTinyCollection []*LambdaTiny

// Validate validates the LambdaTinyCollection media type instance.
func (mt LambdaTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeLambdaCollection decodes the LambdaCollection instance encoded in resp body.
func (c *Client) DecodeLambdaCollection(resp *http.Response) (LambdaCollection, error) {
	var decoded LambdaCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeLambdaTinyCollection decodes the LambdaTinyCollection instance encoded in resp body.
func (c *Client) DecodeLambdaTinyCollection(resp *http.Response) (LambdaTinyCollection, error) {
	var decoded LambdaTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
