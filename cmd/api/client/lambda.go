// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/markusklems/p7/cmd/api/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/api
// --version=v1.1.0-dirty
//
// API "p7": lambda Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"golang.org/x/net/websocket"
	"net/http"
	"net/url"
	"strconv"
)

// CodeLambdaPath computes a request path to the code action of lambda.
func CodeLambdaPath(lambdaID int) string {
	param0 := strconv.Itoa(lambdaID)

	return fmt.Sprintf("/p7/lambdas/%s/actions/code", param0)
}

// Retrieve lambda code with given id
func (c *Client) CodeLambda(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCodeLambdaRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCodeLambdaRequest create the request corresponding to the code action endpoint of the lambda resource.
func (c *Client) NewCodeLambdaRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateLambdaPath computes a request path to the create action of lambda.
func CreateLambdaPath() string {

	return fmt.Sprintf("/p7/lambdas")
}

// Creates a lambda
func (c *Client) CreateLambda(ctx context.Context, path string, payload *LambdaPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateLambdaRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateLambdaRequest create the request corresponding to the create action endpoint of the lambda resource.
func (c *Client) NewCreateLambdaRequest(ctx context.Context, path string, payload *LambdaPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteLambdaPath computes a request path to the delete action of lambda.
func DeleteLambdaPath(lambdaID int) string {
	param0 := strconv.Itoa(lambdaID)

	return fmt.Sprintf("/p7/lambdas/%s", param0)
}

// DeleteLambda makes a request to the delete action endpoint of the lambda resource
func (c *Client) DeleteLambda(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteLambdaRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteLambdaRequest create the request corresponding to the delete action endpoint of the lambda resource.
func (c *Client) NewDeleteLambdaRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListLambdaPath computes a request path to the list action of lambda.
func ListLambdaPath() string {

	return fmt.Sprintf("/p7/lambdas")
}

// List all avilable lambdas
func (c *Client) ListLambda(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListLambdaRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListLambdaRequest create the request corresponding to the list action endpoint of the lambda resource.
func (c *Client) NewListLambdaRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowLambdaPath computes a request path to the show action of lambda.
func ShowLambdaPath(lambdaID int) string {
	param0 := strconv.Itoa(lambdaID)

	return fmt.Sprintf("/p7/lambdas/%s", param0)
}

// Retrieve lambda with given id
func (c *Client) ShowLambda(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowLambdaRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowLambdaRequest create the request corresponding to the show action endpoint of the lambda resource.
func (c *Client) NewShowLambdaRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateLambdaPath computes a request path to the update action of lambda.
func UpdateLambdaPath(lambdaID int) string {
	param0 := strconv.Itoa(lambdaID)

	return fmt.Sprintf("/p7/lambdas/%s", param0)
}

// UpdateLambda makes a request to the update action endpoint of the lambda resource
func (c *Client) UpdateLambda(ctx context.Context, path string, payload *LambdaPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateLambdaRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateLambdaRequest create the request corresponding to the update action endpoint of the lambda resource.
func (c *Client) NewUpdateLambdaRequest(ctx context.Context, path string, payload *LambdaPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// WatchLambdaPath computes a request path to the watch action of lambda.
func WatchLambdaPath(lambdaID int) string {
	param0 := strconv.Itoa(lambdaID)

	return fmt.Sprintf("/p7/lambdas/%s/watch", param0)
}

// Retrieve lambda with given id
func (c *Client) WatchLambda(ctx context.Context, path string) (*websocket.Conn, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "ws"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	url_ := u.String()
	cfg, err := websocket.NewConfig(url_, url_)
	if err != nil {
		return nil, err
	}
	return websocket.DialConfig(cfg)
}
