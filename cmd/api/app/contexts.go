// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "p7": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/markusklems/p7/cmd/api/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/api
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CheckHealthContext provides the health check action context.
type CheckHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCheckHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller check action.
func NewCheckHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*CheckHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CheckHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CheckHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CodeLambdaContext provides the lambda code action context.
type CodeLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LambdaID int
}

// NewCodeLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller code action.
func NewCodeLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*CodeLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CodeLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLambdaID := req.Params["lambda_id"]
	if len(paramLambdaID) > 0 {
		rawLambdaID := paramLambdaID[0]
		if lambdaID, err2 := strconv.Atoi(rawLambdaID); err2 == nil {
			rctx.LambdaID = lambdaID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lambda_id", rawLambdaID, "integer"))
		}
	}
	return &rctx, err
}

// OKCode sends a HTTP response with status code 200.
func (ctx *CodeLambdaContext) OKCode(r *LambdaCode) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OK sends a HTTP response with status code 200.
func (ctx *CodeLambdaContext) OK(r *Lambda) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *CodeLambdaContext) OKFull(r *LambdaFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *CodeLambdaContext) OKTiny(r *LambdaTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CodeLambdaContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateLambdaContext provides the lambda create action context.
type CreateLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LambdaPayload
}

// NewCreateLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller create action.
func NewCreateLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateLambdaContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateLambdaContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateLambdaContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteLambdaContext provides the lambda delete action context.
type DeleteLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LambdaID int
}

// NewDeleteLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller delete action.
func NewDeleteLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLambdaID := req.Params["lambda_id"]
	if len(paramLambdaID) > 0 {
		rawLambdaID := paramLambdaID[0]
		if lambdaID, err2 := strconv.Atoi(rawLambdaID); err2 == nil {
			rctx.LambdaID = lambdaID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lambda_id", rawLambdaID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteLambdaContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteLambdaContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteLambdaContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListLambdaContext provides the lambda list action context.
type ListLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller list action.
func NewListLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListLambdaContext) OK(r LambdaCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json; type=collection")
	if r == nil {
		r = LambdaCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListLambdaContext) OKTiny(r LambdaTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json; type=collection")
	if r == nil {
		r = LambdaTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListLambdaContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListLambdaContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// RunLambdaContext provides the lambda run action context.
type RunLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LambdaID int
}

// NewRunLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller run action.
func NewRunLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*RunLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RunLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLambdaID := req.Params["lambda_id"]
	if len(paramLambdaID) > 0 {
		rawLambdaID := paramLambdaID[0]
		if lambdaID, err2 := strconv.Atoi(rawLambdaID); err2 == nil {
			rctx.LambdaID = lambdaID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lambda_id", rawLambdaID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RunLambdaContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RunLambdaContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RunLambdaContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowLambdaContext provides the lambda show action context.
type ShowLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LambdaID int
}

// NewShowLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller show action.
func NewShowLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLambdaID := req.Params["lambda_id"]
	if len(paramLambdaID) > 0 {
		rawLambdaID := paramLambdaID[0]
		if lambdaID, err2 := strconv.Atoi(rawLambdaID); err2 == nil {
			rctx.LambdaID = lambdaID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lambda_id", rawLambdaID, "integer"))
		}
	}
	return &rctx, err
}

// OKCode sends a HTTP response with status code 200.
func (ctx *ShowLambdaContext) OKCode(r *LambdaCode) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowLambdaContext) OK(r *Lambda) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowLambdaContext) OKFull(r *LambdaFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowLambdaContext) OKTiny(r *LambdaTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.lambda+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowLambdaContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateLambdaContext provides the lambda update action context.
type UpdateLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LambdaID int
	Payload  *LambdaPayload
}

// NewUpdateLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller update action.
func NewUpdateLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLambdaID := req.Params["lambda_id"]
	if len(paramLambdaID) > 0 {
		rawLambdaID := paramLambdaID[0]
		if lambdaID, err2 := strconv.Atoi(rawLambdaID); err2 == nil {
			rctx.LambdaID = lambdaID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lambda_id", rawLambdaID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateLambdaContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateLambdaContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateLambdaContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// WatchLambdaContext provides the lambda watch action context.
type WatchLambdaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LambdaID int
}

// NewWatchLambdaContext parses the incoming request URL and body, performs validations and creates the
// context used by the lambda controller watch action.
func NewWatchLambdaContext(ctx context.Context, r *http.Request, service *goa.Service) (*WatchLambdaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WatchLambdaContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLambdaID := req.Params["lambda_id"]
	if len(paramLambdaID) > 0 {
		rawLambdaID := paramLambdaID[0]
		if lambdaID, err2 := strconv.Atoi(rawLambdaID); err2 == nil {
			rctx.LambdaID = lambdaID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lambda_id", rawLambdaID, "integer"))
		}
	}
	return &rctx, err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *WatchLambdaContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
