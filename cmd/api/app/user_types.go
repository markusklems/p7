// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/markusklems/p7/cmd/api/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/api
// --version=v1.1.0-dirty
//
// API "p7": Application User Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// LambdaPayload is the type used to create a lambda
type lambdaPayload struct {
	// Code that should be executed
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Name of lambda
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the lambdaPayload type instance.
func (ut *lambdaPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Code == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if ut.Code != nil {
		if utf8.RuneCountInString(*ut.Code) < 16 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, *ut.Code, utf8.RuneCountInString(*ut.Code), 16, true))
		}
	}
	if ut.Code != nil {
		if utf8.RuneCountInString(*ut.Code) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, *ut.Code, utf8.RuneCountInString(*ut.Code), 500, false))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 2, true))
		}
	}
	return
}

// Publicize creates LambdaPayload from lambdaPayload
func (ut *lambdaPayload) Publicize() *LambdaPayload {
	var pub LambdaPayload
	if ut.Code != nil {
		pub.Code = *ut.Code
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// LambdaPayload is the type used to create a lambda
type LambdaPayload struct {
	// Code that should be executed
	Code string `form:"code" json:"code" xml:"code"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the LambdaPayload type instance.
func (ut *LambdaPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if utf8.RuneCountInString(ut.Code) < 16 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, ut.Code, utf8.RuneCountInString(ut.Code), 16, true))
	}
	if utf8.RuneCountInString(ut.Code) > 500 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, ut.Code, utf8.RuneCountInString(ut.Code), 500, false))
	}
	if utf8.RuneCountInString(ut.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, ut.Name, utf8.RuneCountInString(ut.Name), 2, true))
	}
	return
}
