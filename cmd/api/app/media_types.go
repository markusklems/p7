// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/markusklems/p7/cmd/api/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/api
// --version=v1.1.0-dirty
//
// API "p7": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// A microservice function named lambda (code view)
//
// Identifier: application/vnd.lambda+json; view=code
type LambdaCode struct {
	// Source code of the user lambda
	Code string `form:"code" json:"code" xml:"code"`
}

// Validate validates the LambdaCode media type instance.
func (mt *LambdaCode) Validate() (err error) {
	if mt.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if utf8.RuneCountInString(mt.Code) < 16 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 16, true))
	}
	if utf8.RuneCountInString(mt.Code) > 500 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 500, false))
	}
	return
}

// A microservice function named lambda (default view)
//
// Identifier: application/vnd.lambda+json; view=default
type Lambda struct {
	// API href for making requests on the lambda
	Href string `form:"href" json:"href" xml:"href"`
	// Unique lambda ID
	ID int `form:"id" json:"id" xml:"id"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Lambda media type instance.
func (mt *Lambda) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// A microservice function named lambda (full view)
//
// Identifier: application/vnd.lambda+json; view=full
type LambdaFull struct {
	// Source code of the user lambda
	Code string `form:"code" json:"code" xml:"code"`
	// Date of creation
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// API href for making requests on the lambda
	Href string `form:"href" json:"href" xml:"href"`
	// Unique lambda ID
	ID int `form:"id" json:"id" xml:"id"`
	// Links to related resources
	Links *LambdaLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
	// Date of last update
	UpdatedAt *time.Time `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// Validate validates the LambdaFull media type instance.
func (mt *LambdaFull) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if utf8.RuneCountInString(mt.Code) < 16 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 16, true))
	}
	if utf8.RuneCountInString(mt.Code) > 500 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.code`, mt.Code, utf8.RuneCountInString(mt.Code), 500, false))
	}
	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// A microservice function named lambda (tiny view)
//
// Identifier: application/vnd.lambda+json; view=tiny
type LambdaTiny struct {
	// API href for making requests on the lambda
	Href string `form:"href" json:"href" xml:"href"`
	// Unique lambda ID
	ID int `form:"id" json:"id" xml:"id"`
	// Name of lambda
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the LambdaTiny media type instance.
func (mt *LambdaTiny) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if utf8.RuneCountInString(mt.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 2, true))
	}
	return
}

// LambdaLinks contains links to related resources of Lambda.
type LambdaLinks struct {
}

// LambdaCollection is the media type for an array of Lambda (default view)
//
// Identifier: application/vnd.lambda+json; type=collection; view=default
type LambdaCollection []*Lambda

// Validate validates the LambdaCollection media type instance.
func (mt LambdaCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// LambdaCollection is the media type for an array of Lambda (tiny view)
//
// Identifier: application/vnd.lambda+json; type=collection; view=tiny
type LambdaTinyCollection []*LambdaTiny

// Validate validates the LambdaTinyCollection media type instance.
func (mt LambdaTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
