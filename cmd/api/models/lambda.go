// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/markusklems/p7/cmd/api/design
// --out=$(GOPATH)/src/github.com/markusklems/p7/cmd/api
// --version=v1.1.0-dirty
//
// API "p7": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"github.com/markusklems/p7/cmd/api/app"
	"golang.org/x/net/context"
	"time"
)

// Lambda Model
type Lambda struct {
	ID        int `gorm:"primary_key"` // This is the Lambda Model PK field
	Code      string
	Name      string
	CreatedAt time.Time  // timestamp
	DeletedAt *time.Time // nullable timestamp (soft delete)
	UpdatedAt time.Time  // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Lambda) TableName() string {
	return "lambdas"

}

// LambdaDB is the implementation of the storage interface for
// Lambda.
type LambdaDB struct {
	Db *gorm.DB
}

// NewLambdaDB creates a new storage type.
func NewLambdaDB(db *gorm.DB) *LambdaDB {
	return &LambdaDB{Db: db}
}

// DB returns the underlying database.
func (m *LambdaDB) DB() interface{} {
	return m.Db
}

// LambdaStorage represents the storage interface.
type LambdaStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Lambda, error)
	Get(ctx context.Context, id int) (*Lambda, error)
	Add(ctx context.Context, lambda *Lambda) error
	Update(ctx context.Context, lambda *Lambda) error
	Delete(ctx context.Context, id int) error

	ListLambdaCode(ctx context.Context) []*app.LambdaCode
	OneLambdaCode(ctx context.Context, id int) (*app.LambdaCode, error)

	ListLambda(ctx context.Context) []*app.Lambda
	OneLambda(ctx context.Context, id int) (*app.Lambda, error)

	ListLambdaFull(ctx context.Context) []*app.LambdaFull
	OneLambdaFull(ctx context.Context, id int) (*app.LambdaFull, error)

	ListLambdaTiny(ctx context.Context) []*app.LambdaTiny
	OneLambdaTiny(ctx context.Context, id int) (*app.LambdaTiny, error)

	UpdateFromLambdaPayload(ctx context.Context, payload *app.LambdaPayload, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *LambdaDB) TableName() string {
	return "lambdas"

}

// CRUD Functions

// Get returns a single Lambda as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *LambdaDB) Get(ctx context.Context, id int) (*Lambda, error) {
	defer goa.MeasureSince([]string{"goa", "db", "lambda", "get"}, time.Now())

	var native Lambda
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Lambda
func (m *LambdaDB) List(ctx context.Context) ([]*Lambda, error) {
	defer goa.MeasureSince([]string{"goa", "db", "lambda", "list"}, time.Now())

	var objs []*Lambda
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *LambdaDB) Add(ctx context.Context, model *Lambda) error {
	defer goa.MeasureSince([]string{"goa", "db", "lambda", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Lambda", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *LambdaDB) Update(ctx context.Context, model *Lambda) error {
	defer goa.MeasureSince([]string{"goa", "db", "lambda", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Lambda", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *LambdaDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "lambda", "delete"}, time.Now())

	var obj Lambda

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting Lambda", "error", err.Error())
		return err
	}

	return nil
}

// LambdaFromLambdaPayload Converts source LambdaPayload to target Lambda model
// only copying the non-nil fields from the source.
func LambdaFromLambdaPayload(payload *app.LambdaPayload) *Lambda {
	lambda := &Lambda{}
	lambda.Code = payload.Code
	lambda.Name = payload.Name

	return lambda
}

// UpdateFromLambdaPayload applies non-nil changes from LambdaPayload to the model and saves it
func (m *LambdaDB) UpdateFromLambdaPayload(ctx context.Context, payload *app.LambdaPayload, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "lambda", "updatefromlambdaPayload"}, time.Now())

	var obj Lambda
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Lambda", "error", err.Error())
		return err
	}
	obj.Code = payload.Code
	obj.Name = payload.Name

	err = m.Db.Save(&obj).Error
	return err
}
